// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  subscriptionStatus String    @default("FREE") // FREE, ACTIVE, CANCELLED, PAST_DUE
  subscriptionPlan   String    @default("free") // free, starter, pro, enterprise
  stripeCustomerId   String?   @unique
  stripeSubscriptionId String? @unique
  trainingCredits    Int       @default(3)
  totalTrainings     Int       @default(0)
  emailSubscribed    Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  trainingJobs  TrainingJob[]
  payments      Payment[]
  emailLogs     EmailLog[]
  sentCampaigns NewsletterCampaign[]
}

model EmailLog {
  id        String   @id @default(cuid())
  userId    String
  type      String   // welcome, payment_confirmation, training_completed, newsletter
  recipient String
  subject   String
  status    String   // sent, failed, bounced
  resendId  String?
  error     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterCampaign {
  id             String   @id @default(cuid())
  subject        String
  content        String   @db.Text
  targetAudience String   // all, free, paid, active
  recipientCount Int      @default(0)
  sentCount      Int      @default(0)
  failedCount    Int      @default(0)
  status         String   @default("draft") // draft, sending, sent, failed
  sentBy         String
  createdAt      DateTime @default(now())
  sentAt         DateTime?

  sender User @relation(fields: [sentBy], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TrainingJob {
  id                String   @id @default(cuid())
  userId            String
  jobId             String   @unique
  modelName         String
  datasetPath       String
  status            String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED, CANCELLED
  progress          Float    @default(0)
  currentEpoch      Int      @default(0)
  totalEpochs       Int      @default(3)
  currentLoss       Float?
  accuracy          Float?
  gpuType           String   @default("T4")
  outputDir         String?
  modalJobId        String?
  errorMessage      String?
  startedAt         DateTime?
  completedAt       DateTime?
  creditsUsed       Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentId   String   @unique
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String   // succeeded, pending, failed
  description       String?
  creditsAdded      Int      @default(0)
  subscriptionPlan  String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id                String @id @default(cuid())
  name              String @unique
  displayName       String
  description       String
  price             Int    // Price in cents
  currency          String @default("usd")
  interval          String // month, year
  trainingCredits   Int    // Credits included per billing period
  maxGpuType        String @default("T4") // Maximum GPU type allowed
  maxTrainingTime   Int    @default(3600) // Maximum training time in seconds
  features          Json   // JSON array of features
  stripePriceId     String @unique
  active            Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

